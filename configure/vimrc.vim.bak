" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

"set variable $VIMHOME
if has('win32') || has('win64')
	let $VIMHOME = $VIM."/vimfiles"
	"set window pos and window size
	"winpos 5 5
	"set lines=38 columns=360
else
	let $VIMHONE = $HOME."/.vim"
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  "set window max
  autocmd GUIEnter * simalt ~x
  
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on
  set smartindent		" always set smart indent on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

"set color sechema
colorscheme wombat256

"set font
set guifont=Consolas:h10

"language setting
set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

if has("vms")
    "no back file/temp file
    set nobackup
    set nowritebackup

    "remove swaf file
    set noswf
else
    set backup
endif
"show line numbers
set number

"show rule
set ruler

"jump to the matching one after a bracket insert
set showmatch

"tab width
set ts=4

"number of spaces to use for each step of indent
set sw=4

"highlight all search pattern matches.
set hls

"status bar
set laststatus=2
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\

"ignore case
set ignorecase

"fold setting
set foldenable
set foldmethod=syntax

"auto change current dir
set autochdir

"no wrap
set nowrap

"show bottom scroll bar
set guioptions+=b 

"Add short key to open new tab
map ^T :tabnew<CR>
map <F2> :tabnew<CR>
map <F3> :tabprevious<CR>
map <F4> :tabnext<CR>
map <F5> :BufExplorer<CR>
map <F6> :FufFile<CR>
map <F7> :FufDir<CR>

""""""""""""""""""""""""""""""""""""""""
" Public functions
""""""""""""""""""""""""""""""""""""""""
" return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
    if has("win16") || has("win32") || has("win64") || has("win95")
        return "windows"
    elseif has("unix")
        return "linux"
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""
" Plugin configures
""""""""""""""""""""""""""""""""""""""""
"tag list configure
if MySys() == "windows"
    let Tlist_Ctags_Cmd = '"'.$VIMRUNTIME.'/ctags.exe"'
elseif MySys() == "linux"
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif

nnoremap <silent> <F9> :TlistToggle<CR>
"show tags of current document only
let Tlist_Show_One_File = 1
"exit vim if the taglist window is the only window
let Tlist_Exit_OnlyWindow = 1
"show tag list window at right
let Tlist_Use_Right_Window = 1
"auto fold code not being edit
let Tlist_File_Fold_Auto_Close=1
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1

"NERD Tree setting
map <F8> :NERDTreeToggle<CR>

"NeoCompletion setting
"use neocomplcache
let g:NeoComplCache_EnableAtStartup=1
"disable neocomplcache
"let g:NeoComplCache_DisableAutoComplete=1
"use smartcase
let g:NeoComplCache_SmartCase=1
" Use camel case completion. 
let g:NeoComplCache_EnableCamelCaseCompletion = 1 
" Use underbar completion. 
let g:NeoComplCache_EnableUnderbarCompletion = 1 
" Set minimum syntax keyword length. 
let g:NeoComplCache_MinSyntaxLength = 3 
" Set manual completion length. 
let g:NeoComplCache_ManualCompletionStartLength = 3
" Set minimum keyword length. 
let g:NeoComplCache_MinKeywordLength = 3 
" set the length of the items show in the list 
let g:NeoComplCache_MaxList = 50
" set the numb of input completioning at the time of key input
let g:NeoComplCache_KeywordCompletionStartLength = 3

" Print caching percent in statusline. 
"let g:NeoComplCache_CachingPercentInStatusline = 1 

" Define dictionary. 
let g:NeoComplCache_DictionaryFileTypeLists = { 
      \ 'default' : '', 
      \ 'php' : $VIMHOME.'/dict/php.dict', 
      \ 'python' : $VIMHOME.'/dict/python.dict', 
	  \ 'js' : $VIMHOME.'/dict/javascript.dict',
      \ 'css' : $VIMHOME.'/dict/css.dict', 
      \ 'html' : $VIMHOME.'/dict/html.dict', 
      \ 'htm' : $VIMHOME.'/dict/html.dict',
	  \ 'perl' : $VIMHOME.'/dict/perl.dict',
	  \ 'as' : $VIMHOME.'/dict/actionscript.dict'
      \ } 

" Define keyword. 
if !exists('g:NeoComplCache_KeywordPatterns') 
  let g:NeoComplCache_KeywordPatterns = {} 
endif 
let g:NeoComplCache_KeywordPatterns['default'] = '\h\w*' 

let g:NeoComplCache_SnippetsDir = $VIMHOME.'/snippets' 

" Plugin key-mappings. 
imap <silent><C-l>     <Plug>(neocomplcache_snippets_expand) 
smap <silent><C-l>     <Plug>(neocomplcache_snippets_expand) 
inoremap <expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>" 
inoremap <expr><silent><C-g>     neocomplcache#undo_completion() 
inoremap <expr><C-s>     neocomplcache#complete_common_string()

"NERD Commenter setting
map <C-H> ,c<Space>

"Win manager setting
"let g:winManagerWindowLayout='FileExplorer|TagList|BufExplorer'
"let g:winManagerWidth=35
"nmap <F3> :WMToggle<CR>

"DB ext configure
"let g:dbext_default_profile_oracle = 'type=ORA:user=launchpad@5.11.183.166:passwd=launchpad_app13@5.11.183.166:extra=SID=ORCL';
"let g:dbext_default_profile = 'oracle'

